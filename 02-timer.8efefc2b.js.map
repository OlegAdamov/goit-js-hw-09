{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,S,aAMMC,EAAaC,SAASC,cAAc,oBACpCC,EAAWF,SAASC,cAAc,gBAClCE,EAAcH,SAASC,cAAc,UACrCG,EAAYD,EAAYF,cAAc,eACtCI,EAAaF,EAAYF,cAAc,gBACvCK,EAAeH,EAAYF,cAAc,kBACzCM,EAAeJ,EAAYF,cAAc,kBAE3CO,EAAQ,KAENC,EAAU,CACdC,YAAY,EACZC,WAAW,EACXC,YAAa,IAAIC,KACjBC,gBAAiB,EACjBC,QAAA,SAAQC,GACN,GAAIA,EAAc,IAAK,IAAIH,MAAOI,UAEhC,OADAf,EAASgB,UAAW,EACbC,EAAAC,OAAOC,QAAQ,uCAEtBnB,EAASgB,UAAW,EA0BpBhB,EAASoB,iBAAiB,SAxBd,WACZd,EAAQe,aAAY,WAElBrB,EAASgB,UAAW,EAElB,IAAMM,EAAY,IAAIX,KAClBY,EAAYT,EAAc,GAAKQ,EACOE,EA2BpD,SAAmBC,GACjB,IAAMC,EAAS,IACTC,EAAkB,GAATD,EACTE,EAAgB,GAATD,EACPE,EAAa,GAAPD,EAENE,EAAOC,EAAIC,KAAKC,MAAMR,EAAKI,IAC3BK,EAAQH,EAAIC,KAAKC,MAAMR,EAAMI,EAAOD,IACpCO,EAAUJ,EAAIC,KAAKC,MAAMR,EAAOI,EAAOD,EAAQD,IAC/CS,EAAUL,EAAIC,KAAKC,MAAMR,EAAQI,EAAOD,EAAQD,EAAUD,IAEhE,MAAO,CAAEI,OAAMI,QAAOC,UAASC,WAtCmBC,CAAUd,GAA5CO,EAAkCN,EAAlCM,KAAMI,EAA4BV,EAA5BU,MAAOC,EAAqBX,EAArBW,QAASC,EAAYZ,EAAZY,QAUzB,GARLlC,EAAUoC,YAAc,GAAQC,OAALT,GAC3B3B,EAAWmC,YAAc,GAASC,OAANL,GAC5B9B,EAAakC,YAAc,GAAWC,OAARJ,GAC9B9B,EAAaiC,YAAc,GAAWC,OAARH,GAGhCvC,EAAWmB,UAAW,EAEXO,EAAY,IAEf,OADCiB,aAAalC,GACPW,EAAAC,OAAOuB,QAAQ,oCAG7B,UAQT,SAASV,EAAIW,GACX,OAAOC,OAAOD,GAAOE,SAAS,EAAG,MAHnC,EAAAjD,EAAAkD,SAAU,mBAAoBtC,G","sources":["src/js/02-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\"\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n\n// const flatpickr = require(\"flatpickr\");\nconst windowTime = document.querySelector('#datetime-picker');\nconst startBtn = document.querySelector('[data-start]');\nconst timerWindow = document.querySelector('.timer');\nconst timerDays = timerWindow.querySelector('[data-days]');\nconst timerHours = timerWindow.querySelector('[data-hours]');\nconst timerMinutes = timerWindow.querySelector('[data-minutes]');\nconst timerSeconds = timerWindow.querySelector('[data-seconds]');\n\nlet start = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (selectedDates[0] < new Date().getTime()) {\n      startBtn.disabled = true;\n      return Notify.failure(\"Please choose a date in the future.\");\n    }\n      startBtn.disabled = false;\n\n    const timer = () =>  {\n      start = setInterval(() => {\n\n        startBtn.disabled = true;\n\n          const startTime = new Date();\n          let countDown = selectedDates[0] - startTime;\n          const { days, hours, minutes, seconds } = convertMs(countDown);\n    \n          timerDays.textContent = `${days}`;\n          timerHours.textContent = `${hours}`;\n          timerMinutes.textContent = `${minutes}`;\n          timerSeconds.textContent = `${seconds}`;\n        // console.log(` ${days}, ${hours}, ${minutes}, ${seconds} `)  \n        \n        windowTime.disabled = true;\n\n               if (countDown < 1000) {\n                 clearTimeout(start);\n                return Notify.success(\"Congratulation, time is Ended.\");\n        }\n      \n      }, 1000)\n      }\n      startBtn.addEventListener('click', timer)\n    },\n};\n\nflatpickr(\"#datetime-picker\", options);\n\nfunction pad(value) {\n  return String(value).padStart(2, '0');\n};\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = pad(Math.floor(ms / day));\n  const hours = pad(Math.floor((ms % day) / hour));\n  const minutes = pad(Math.floor(((ms % day) % hour) / minute));\n  const seconds = pad(Math.floor((((ms % day) % hour) % minute) / second));\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["$dbdyf","parcelRequire","$84b9dae4df53835d$var$windowTime","document","querySelector","$84b9dae4df53835d$var$startBtn","$84b9dae4df53835d$var$timerWindow","$84b9dae4df53835d$var$timerDays","$84b9dae4df53835d$var$timerHours","$84b9dae4df53835d$var$timerMinutes","$84b9dae4df53835d$var$timerSeconds","$84b9dae4df53835d$var$start","$84b9dae4df53835d$var$options","enableTime","time_24hr","defaultDate","Date","minuteIncrement","onClose","selectedDates","getTime","disabled","$h6c0i","Notify","failure","addEventListener","setInterval","startTime","countDown","ref","ms","second","minute","hour","day","days","$84b9dae4df53835d$var$pad","Math","floor","hours","minutes","seconds","$84b9dae4df53835d$var$convertMs","textContent","concat","clearTimeout","success","value","String","padStart","default"],"version":3,"file":"02-timer.8efefc2b.js.map"}