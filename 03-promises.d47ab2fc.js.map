{"mappings":"gfAAAA,EAAA,S,iBAKMC,EAAiBC,SAASC,cAAc,SAExCC,EAAcF,SAASC,cAAc,kBAErCE,EAAaH,SAASC,cAAc,iBAEpCG,EAAeJ,SAASC,cAAc,mBA6B5C,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEvCC,YAAW,WACNH,EACLF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,YAGjBA,MArCLR,EAAegB,iBAAiB,UAGhC,SAAsBC,GACpBA,EAAMC,iBASN,IAPA,IAAIC,EAAQC,OAAOjB,EAAYkB,OAEzBC,EAAOF,OAAOhB,EAAWiB,OAEzBE,EAASH,OAAOf,EAAagB,OAG1BG,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAChClB,EAAckB,EAAGL,GACdM,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACjBmB,EAAAC,OAAOC,QAAQ,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,WAE9DuB,OAAM,SAAAL,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MAClBmB,EAAAC,OAAOI,QAAQ,sBAAqCF,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,WAE9DW,GAASG,K","sources":["src/js/03-promises.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\"\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n\nconst onFormPromises = document.querySelector('.form');\n\nconst onFormDelay = document.querySelector('[name=\"delay\"]');\n// console.log('onFormDelay', onFormDelay)\nconst onFormStep = document.querySelector('[name=\"step\"]');\n// console.log('onFormStep', onFormStep)\nconst onFormAmount = document.querySelector('[name=\"amount\"]');\n// console.log('onFormAmount', onFormAmount)\n\nonFormPromises.addEventListener('submit', onFormSubmit);\n\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n\n  let delay = Number(onFormDelay.value);\n  // console.log('delay', delay)\n  const step = Number(onFormStep.value);\n  // console.log('step', step)\n  const amount = Number(onFormAmount.value);\n  // console.log('amount', amount)\n\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms.`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms.`);\n      });\n    delay += step;\n  }\n}\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    \n   setTimeout(() => {  \n    if (shouldResolve) {\n   resolve({ position, delay })\n  } else {\n   reject({ position, delay })\n    \n    };\n  }, delay)\n  })\n}\n"],"names":["parcelRequire","$ce04d3a99e08e73b$var$onFormPromises","document","querySelector","$ce04d3a99e08e73b$var$onFormDelay","$ce04d3a99e08e73b$var$onFormStep","$ce04d3a99e08e73b$var$onFormAmount","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","delay1","Number","value","step","amount","i","then","param","$h6c0i","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.d47ab2fc.js.map"}